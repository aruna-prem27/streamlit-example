# -*- coding: utf-8 -*-
"""Untitled-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IesoyMywlqA5HXDauqaURxXHAnNztdvN
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import joblib

# Load the PIMA dataset
df = pd.read_csv('diabetes.csv')

# Split the dataset into features and target variable
X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Train a Random Forest classifier
model = RandomForestClassifier(random_state=0)
model.fit(X_train, y_train)

# Save the model
joblib.dump(model, 'model.joblib')

# Create a Streamlit app
st.title('Diabetes Prediction App')

st.write("""
Enter the following details to predict diabetes:
""")

# Create input fields for user to input data
pregnancies = st.slider('Number of Pregnancies', 0, 17, 3)
glucose = st.slider('Plasma Glucose Concentration', 0, 199, 117)
blood_pressure = st.slider('Diastolic Blood Pressure', 0, 122, 72)
skin_thickness = st.slider('Triceps Skin Fold Thickness', 0, 99, 23)
insulin = st.slider('2-Hour Serum Insulin', 0, 846, 30)
bmi = st.slider('Body Mass Index (BMI)', 0.0, 67.1, 32.0)
dpf = st.slider('Diabetes Pedigree Function', 0.078, 2.42, 0.3725)
age = st.slider('Age', 21, 81, 29)

# Predict button
if st.button('Predict'):
    input_data = {'Pregnancies': [pregnancies],
                  'Glucose': [glucose],
                  'BloodPressure': [blood_pressure],
                  'SkinThickness': [skin_thickness],
                  'Insulin': [insulin],
                  'BMI': [bmi],
                  'DiabetesPedigreeFunction': [dpf],
                  'Age': [age]}

    input_df = pd.DataFrame(input_data)

    model = joblib.load('model.joblib')
    prediction = model.predict(input_df)

    if prediction[0] == 1:
        st.error('You may have diabetes.')
    else:
        st.success('You may not have diabetes.')

import sys

if __name__ == "__main__":
    # Remove the CWD from sys.path while we load stuff.
    # This is added back by InteractiveShellApp.init_path()
    if sys.path[0] == "":
        del sys.path[0]

from ipykernel import kernelapp as app

# save the model to disk
joblib.dump(model, "rf_model.sav")

